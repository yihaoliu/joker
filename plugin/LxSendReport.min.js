
function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(function () {
  var LXSendReport = function LXSendReport(lxdata) {
    var getUrlParam = function getUrlParam(name, url) {
      url = url ? String(url) :
      /* istanbul ignore next */
      window.location.href;
      var results = new RegExp('[\\?&]' + String(name) + '=([^&#]*)').exec(url);

      if (!results) {
        return '';
      }

      return results[1] ||
      /* istanbul ignore next */
      '';
    };

    var getCookie = function getCookie(cookieName) {
      if (typeof cookieName !== 'string' || !cookieName.length) {
        return '';
      }

      var name = cookieName + '=';
      var cookies = document.cookie.split(';');

      for (var _i = 0, cookies_1 = cookies; _i < cookies_1.length; _i++) {
        var cookie = cookies_1[_i];
        var cookieStr = cookie.trim();

        if (cookieStr.indexOf(name) === 0) {
          return decodeURIComponent(cookieStr.substring(name.length, cookieStr.length));
        }
      }

      return '';
    };

    var getWmPoiId = function getWmPoiId() {
      var wmPoiId = parseInt(getUrlParam('wmPoiId') || getCookie('wmPoiId'));
      return window.isNaN(wmPoiId) ? 0 : wmPoiId;
    };

    var getSource = function getSource() {
      var source = window.location.host.indexOf("hd.waimai") > -1 ? 'm' : 'b'; // 端类型，1商家端，0先富

      return source;
    };

    var LxHelper = /*#__PURE__*/function () {
      function LxHelper() {
        _classCallCheck(this, LxHelper);

        _defineProperty(this, "eventMap", {
          pv: 'pageView',
          mc: 'moduleClick',
          mv: 'moduleView'
        });

        _defineProperty(this, "_primaryKey", {
          poi_id: true,
          index: true,
          product_id: true
        });
      }

      _createClass(LxHelper, [{
        key: "getEventName",
        value: function getEventName() {
          var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

          // 以 c_ 开头的id是 pageView
          if (id.startsWith('c_')) {
            return this.eventMap.pv;
          } // 其他一般是 bid，使用后缀区分 mc 和 mv
          // eg： b_waimai_e_qtex1uvx_mv   b_waimai_e_v0boparu_mc


          var name = id.slice(id.length - 2);
          return this.eventMap[name] || 'moduleClick';
        } // 拆分 通用参数 和 业务参数

      }, {
        key: "genLxData",
        value: function genLxData() {
          var _this = this;

          var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (!data) {
            return {};
          }

          var keys = Object.keys(data);
          var lxData = {
            custom: {}
          };
          keys.forEach(function (key) {
            // 上报时 通用参数需要放在最外层，其他都是业务参数，需要放在 custom 里面
            if (_this._primaryKey[key]) {
              lxData[key] = data[key];
            } else {
              lxData.custom[key] = data[key];
            }
          });
          return lxData;
        }
      }]);

      return LxHelper;
    }();

    var id = lxdata.id,
        _lxdata$data = lxdata.data,
        data = _lxdata$data === void 0 ? {} : _lxdata$data,
        _lxdata$options = lxdata.options,
        options = _lxdata$options === void 0 ? {} : _lxdata$options,
        _lxdata$env = lxdata.env,
        env = _lxdata$env === void 0 ? null : _lxdata$env;
    var lxHelper = new LxHelper();
    var categorys = {
      m: 'waimai_m',
      b: 'waimai_e'
    };
    var origin = getSource(); // if(getSource() === 'm'){
    //     // m端不上报数据
    //     return;
    // }

    options.category = categorys[origin]; // 扩充默认环境参数

    data = Object.assign({
      poi_id: getWmPoiId()
    }, data); // 获取上报类型 pv mc mv

    var eventName = lxHelper.getEventName(id); // 拆分上报数据为 通用参数 和 业务参数

    var lxData = lxHelper.genLxData(data);
    var LXPorit = LXAnalytics || Analytics;

    if (eventName === lxHelper.eventMap.pv) {
      LXPorit(eventName, lxData, env, id, options);
    } else {
      LXPorit(eventName, id, lxData, options);
    }

    ;
  };

  window.LXSendReport = LXSendReport;
})();